!! Revisite du DSL Die : un cas de Double Dispatch
@ch:doubleDispatch

Dans le chapitre *@cha:dsl*, en utilisant le DSL Die, nous avons pu ajouter deux jets de dés comme par exemple ==2 D20 + 1 D4==.
Dans ce nouveau chapitre, nous étendons l'implémentation de ce DSL afin d'autoriser la somme d'un dé avec un autre dé ou bien un jet de dé (instance de DieHandle) ou bien vice-versa.

Un des challenges que nous devons résoudre est que le message ==\+== doit être capable de gérer plusieurs type de receveurs et d'arguments.
Le message pourra avoir soit un dé ou un jet de dé comme receveurs et arguments, donc il nous gérer toutes les possibilités: dé \+ jet dés, dé \+ dé, jet de dés \+ jet de dés and jet de dés \+ dé.
Alors que cette extension semble triviale dans un premier temps, nous allons voir que qu'elle va nous amner explorer la notion de ''double dispatch''.

Le ''double dispatch'' est une technique qui permet d'éviter de coder en dur des vérifications sur les types des objets et permet de définir incrémentalement la gestion du comportement de toutes les possibilités.
Le double dispatch est basé sur le principe orienté objet ''Don't ask, tell'' appliqué deux fois.
Dans le cas du message ==\+==, il y a une première sélection (dispatch) qui permet de sélectionner la bonne méthode.
Puis une deuxième sélection (dispatch) est effectué lorsque dans la méthode, un nouveau message est envoyé à l' ''argument'' du message ==\+== qui indique à l'argument comment le receveur doit être ajouté.
Afin d'expliquer plus concrètement les choses, voyons un exemple complet.

!!! Un petit rappel

Dans le chapitre précédent, nous avons implémenté un petit DSL afin d'additionner des dés et de gérer des jets de plusieurs dés.
Avec ce DSL, vous pouvons créer des dés et les ajouter à des jets de dés (instance de DieHandle).
Nous avons pu plus tard, additionner deux jets de dés afin d'en obtenir une nouvelle.

Les tests qui suivent montre ces deux comportements: premièrement la création d'un jet de dés et deuxièment la somme de deux jets de dés.

[[[
DieHandleTest >> testCreationAdding
	| handle |
	handle := DieHandle new
		addDice: (Dice faces: 6);
		addDice: (Dice faces: 10);
		yourself.
	self assert: handle diceNumber = 2
]]]

[[[
DieHandleTest >> testSummingWithNiceAPI
	| handle |
	handle := 2 D20 + 3 D10.
	self assert: handle diceNumber = 5
]]]


L'implémentation de ==\+== a été simple parce que nous avons seulement des jets de dés à ajouter ensemble.
La méthode ==\+== crée une nouveau jeu de dé, ajout les dés du recevoir et de l'argument au nouveau jet de dés créé et le retourne.

[[[
DieHandle >> + aDieHandle
	"Returns a new handle that represents the addition of the receiver and the argument."
	| handle |
	handle := self class new.
	self dice do: [ :each | handle addDie: each ].
	aDieHandle dice do: [ :each | handle addDie: each ].
	^ handle
]]]


!!! Nouvelles exigences

La première exigence que nous avons est que nous voulons qu'il soit possible d'additioner deux dés ensemble et bien nous devons obtenir un jeu de dés comme indiqué par le test ci-dessous.


Nous voulons ajouter deux dés ensemble:

[[[
(Die withFaces: 6) + (Die withFaces: 6)
]]]

La deuxième exigence est que nous voulons pouvoir mélanger et ajouter un dé avec un jet de dé et vice versa comme illustré ci-dessous:

[[[
2 D20 + (Die withFaces: 6)
]]]

[[[
 (Die withFaces: 6) + 2 D20
]]]


!!! Transformer les exigences en tests

Comme nous sommes infecté par les tests, nous transformons le comportement que nous souhaitons obtenir en comportement automatiquement testables.

Nous voulons ajouter deux dés ensemble:

[[[
DieTest >> testAddTwoDice
	| hd |
	hd := (Die withFaces: 6) + (Die withFaces: 6).
	self assert: hd dice size = 2.
]]]

La deuxième exigence sous la forme des deux tests:

[[[
DieTest >> testAddingADieAndHandle
	| hd |
	hd := (Die faces: 6)
		+
		(DieHandle new
			addDie: 6;
			yourself).
	self assert: hd dice size equals: 2
]]]

[[[
DieHandleTest >> testAddingAnHandleWithADie
	| handle res |
	handle := DieHandle new
		addDie: (Die withFaces: 6);
		addDie: (Die withFaces: 10);
		yourself.
	res := handle + (Die withFaces: 20).
	self assert: res diceNumber equals: 3
]]]

Maintenant nous sommes prêt pour implémenter ces exigences.

!!! Première implémentation

La première solution consiste à vérifier explicitement le type de l'argument afin de décider quoi faire.

[[[
DieHandle >> + aDieOrADieHandle

	^ (aDieOrADieHandle class = DieHandle)
		ifTrue: [ | handle |
					handle := self class new.
					self dice do: [ :each | handle addDie: each ].
					aDieOrADieHandle dice do: [ :each | handle addDie: each ].
					handle ]
		ifFalse: [ | handle |
					handle := self class new.
					self dice do: [ :each | handle addDie: each ].
					handle addDie: aDieOrADieHandle.
					handle  ]
]]]

[[[
Die >> + aDieOrADieHandle
	| selfAsDieHandle |
	selfAsDieHandle := DieHandle new addDie: self.
	^ selfAsDieHandle + aDieOrADieHandle
]]]

Le problème de cette solution, c'est qu'elle ne passe pas à l'échelle.
Plus nous aurons différents types d'arguments, plus cela va nécessité de rajouter des cas à tester.
Cela peut vous sembler un argement fallacieux, mais lorsque vous avez 35 sortes d'arguments comme dans la librairie Pillar (https://github.com/pillar-markup/pillar), le système de gestion de document utilisé pour produire ce document, il n'est plus possible de maintenir une telle solution.

!!! Esquisse du double dispatch

On peut faire mieux !
La logique de la solution est simple mais peu sembler étrange dans un premier temps.
Essayons de l'esquisser.

- lorsqu'on exécute une méthode nous connaissons ce receveur et le type de receveur que nous avons: cela peut être un dé ou un jet de dé. La sélection de la méthode (dispatch) va permettre de trouver la méthode correcte à l'exécution. Imaginons que nous avons deux méthodes ==\+== pour chaque class ==Die== et ==DieHandle==. Lorsque la méthode ==\+== sera exécuté, nous connaitrons le type du receveur.
Par exemple, si la méthode ==\+== définie sur la classe ==Die== est exécuté, nous savons alors que le receveur est un dé (instance de cette classe). De la même manière, lorsque la méthode ==\+== définie sur la classe ==DieHandle== est exécutée, nous savons que le receveur est un jet de dés. C'est le principe de la sélection de méthode (dispatch), la méthode correspondante est choisi en fonction du receveur du message.
- Ensuite l'idée est de dire à l'argument de que nous voulons le sommer avec le receveur. Cela signifie que chaque méthode ==\+== d'une classe différence doit juste envoyer un message différent à son atgument basé sur le fait que le receveur était un dé ou un jet de dé et ainsi laisser faire de nouveau le travail de dispatch. Après ce second dispatch, la méthode correcte sera sélectionnée.

Rendons maintenant cela plus concret.

!!! Ajouter deux dés

Revenons un peu en arrière et commencons par supporter l'ajout de deux dés.
C'est très simple et on retourne un jet de dé dans lequel nous ajoutons le receveur et l'argument.

[[[	
Die >> + aDie
	
	^ DieHandle new 
		addDie: self; 
		addDie: aDie; yourself
]]]

Le premier test doit passer ==testAddTwoDice==.
Mais cette solution ne supporte pas le fait que l'argument peut être soir un dé soit un jé de dés.

!!! Ajouter un dé et un dé ou un jet de dés

Maintenant nous voulons gérer le fait que nous pouvons additioner un dé ou un jet de dé à un receveur comme illustré par le test suivant ==testAddingADieAndHandle==.

[[[
DieTest >> testAddingADieAndHandle
	| hd |
	hd := (Die withFaces: 6)
		+
		(DieHandle new
			addDie: 6;
			yourself).
	self assert: hd dice size equals: 2
]]]

La méthode précédente ==\+== est définitivement ce que nous voulons quand nous avons deux dés.
Renommons la comme ==sumWithDie:== afin de pouvoir l'appeller par la suite.

[[[
Die >> sumWithDie: aDie

	^ DieHandle new
		addDie: self;
		addDie: aDie; yourself
]]]

Maintenant nous pouvons implémenter ==\+== comme suit. Noter que vous avons nommé l'argent ==aDicable== afin de véhiculer l'idée que l'argument peut être soit un dé, soit un jet de dé.

[[[
Die >> + aDicable	
	^ aDicable sumWithDie: self
]]]

Nous disons à l'argument ==aDicable== (qui peut être un dé ou un jet de dé) que nous voulons additioner un dé à celui ci (nous savons que ==self== dans cette méthode est un ==Die== puisqu'il s'agit d'une méthode de cette classe que nous exécutons).
En réécrivant la méthode ==\+==, nous invertissons ==self== et ==aDicable== pour envoier le nouveau messaeg ==sumWithDie:== à l'argument (==aDicable==).
Cette inversion déclenche une nouvelle sélection (dispatch) et réaliser bien un double dispatch (un sur ==\+== et l'autre avec ==sumWithDie:==).

Dans nos deux tests ==testAddTwoDice== et ==testAddingADieAndHandle== nous savons que le receveur est un dé puisque la méthode est définie dans la classe de ==Die==. A partir de ce moment, le test ==testAddTwoDice== doit passer parce que nous additionnons deux dés comme indiqué à la figure *@figDieDoubleDispatchPartialArgDie*.

+Ajout de deux dés.>file://figures/DieDoubleDispatchPartialArgDie.pdf|width=70|label=figDieDoubleDispatchPartialArgDie+

!!! Lorsque l'argument est un jé de dés

Nous devons maintenant trouvé une solution pour le cas où l'argument du message ==\+== est un jet de dés.
En fait, l'argument va recevoir le message ==sumWithDie:==.
De telle sorte que si nous définissons une méthode avec ce nom dans la classe ==DieHandle== elle sera exécutée loesque l'argument du message ==\+== est un jet de dé.

Nous savons comment sommer un dé avec un jet de dé: il suffit simplement de créer un jet de dés, d'ajouter tous les dés du précédent jet de dé au nouveau et d'ajouter l'argument aussi.

Il nous suffit donc de définir la méthode ==sumWithDie:== à la classe ==DieHandle== en implémentant cette logique.

[[[
DieHandle >> sumWithDie: aDie
	| handle |
	handle := self class new.
	self dice do: [ :each | handle addDie: each ].
	handle addDie: aDie.
	^ handle
]]]

Maintenant nous somme capable d'ajouter un dé avec un jet de dé comme indiqué dans la figure *@figDieDoubleDispatchPartialArgDieHandle*. Le test ==testAddingADieAndHandle== doit maintenant passer.

+Ajouter un dé et un jet de dé.>file://figures/DieDoubleDispatchPartialArgDieHandle.pdf|width=90|label=figDieDoubleDispatchPartialArgDieHandle+

!!! Revenons en arrière

Vous pouvez vous demander pourquoi cela marche.
Nous définissons deux méthodes ==sumWithDie:== une sur la classe ==Die== et une autre sur la classe ==DieHandle==. Lorsque la méthode ==\+== de la classe ==Die== envoie le message ==sumWithDie:== soit à un dé soit à un jet de dés, la sélection de messages (dispatch) va sélectionner la méthode correcte ==sumWithDie:== pour nous comme indiqué dans la figure *@figDieDoubleDispatchPartial*.

+Summing a die and a dicable>file://figures/DieDoubleDispatchPartial.pdf|width=90|label=figDieDoubleDispatchPartial+


!!! Maintenant le jet de dés comme receveur

Notre solution ne prend pas en charge le cas où le receveur est un jet de dé.
C'est ce que l'on allons faire maintenant.
Nous somme prêt à appliquer la méthode qu'auparavant mais pour le cas où le receveur est un jet de dé.
Nous allons seulement dire à l'argument du message ==\+== que nous voulons le sommer avec un ''jet de dés'' cette fois ci.

Nous savons comment additionner deux jets de dés, c'est le code que nous avons déjà écrit dans le chapitre précédent. Nous renommons la méthode ==\+== en ==sumWithHandle:== afin de pouvoir l'appeller en redéfinissant la méthode ==\+==. Concrètement cette méthode construit un nouveau jet de dés, ajout les dés du receveur et de l'argument à ce jet et le retourne.

[[[
DieHandle >> sumWithHandle: aDieHandle
	| handle |
	handle := self class new.
	self dice do: [ :each | handle addDie: each ].
	aDieHandle dice do: [ :each | handle addDie: each ].
	^ handle
]]]

Nous pouvons maintenant définir une version beaucoup plus puissante de ==\+== en envoyant simplement le message ==sumWithHandle:== à l' ''argument'' du message ==\+==.
De nouveau, nous envoyons un message à l'argument afin de faire un dispatch pour le message ==sumWithHandle:==.

[[[
DieHandle >> + aDicable
	^ aDicable sumWithHandle: self
]]]

Nous disons que la version de ==\+== est plus puissante que celle de ==sumWithHandle:== parce qu'une fois que nous aurons implémenté la méthode manquante ==sumWithHandle:== sur la classe ==Die==, la méthode ==\+== sera capable d'additioner un jet de dés avec un dé ou deux jets de dés.

+Gérer tous le cas: ajouter un dé/un jet de dés avec un dé/un jet de dés.>file://figures/DieDoubleDispatchFull.pdf|width=90|label=figDieDoubleDispatchFull+

Les tests additionnant deux jets de dés devraient continuer à fonctionner correctement.

!!! sumWithHandle: dans la classe Die

Afin d'avoir la possibilité de sommer un jet de dés avec un simple dé, nous avons juste besoin de définir la nouvelle méthode ==sumWithHandle:== cette fois ci sur la classe ==Die==.
La logique de cette méthode est similaire à celle ajoutant un dé à un jet de dés.

[[[
Die >> sumWithHandle: aDieHandle
	| handle |
	handle := DieHandle new.
	aDieHandle dice do: [ :each | handle addDie: each ].
	handle addDie: self
	^ handle
]]]

Noter que nous aurions pu envouer le message ==aDieHandle sumWithDie: self== comme corps de la méthode ==sumWithHandle:==.

La figure *@figDieDoubleDispatchFull* montre l'ensemble.
Nous vous suggérons de suivre l'exécution des messages pour les différents cas à afin de bien comprendre que juste envoyer un nouveau à l'argument et reposer sur le principe du dispatch produi une exécution conditionnelle modulaire.

Les tests suivants doivent maintenant passé et nous avons fini l'implémentation.

[[[
DieHandleTest >> testAddingAnHandleWithADie
	| handle res |
	handle := DieHandle new
		addDie: (Die faces: 6);
		addDie: (Die faces: 10);
		yourself.
	res := handle + (Die withFaces: 20).
	self assert: res diceNumber equals: 3
]]]

!!! Conclusion

Si nous récapitulons ce que nous avons fait jusq'à présent, nous voyons que nous appliqué le principe ''Don't ask, tell'' deux fois:
une première fois, le message ==\+== sélectionne la méthode correspondante soit dans les classe ==Die== ou ==DieHandle==. Puis un message spécifique est envoyé à l'argument et de nouveau le dispatch sélectionne la méthode correcte ==sumWithDie:== ou ==sumWithHandle:==.

Dans ce chapitre, nous avond introduit la notion de double dispatch (double sélection).
L'idée est d'utiliser le simple dispatch deux fois de suite.
Bien que la conception résultante est simple, il n'est pas trivial dans un premier à comprendre le sens profond et il faut du temps pour bien assimiler cette notion.

Fondamentalement, le double dispatch repose sur le fait qu'envoyer un message à un objet sélectionne la méthode correspondante -- et envoyer un autre message à l'argument du premier message permet de sélectionner une nouvelle méthode.
De cette façon, nous sélectionnons une méthode en fonction à la fois de son receveur et de l'argument du message.
Le double dispatch est à la base du visiteur de conception Visiteur qui est utile lorsque l'on a besoin de gérer des données de structures complexes comme des documents ou des compilateurs. Dans ce cas, il n'est pas rare d'avoir jusqu'à 30 sortes d'objets à gérer ensemble afin de produire le comportement correct.

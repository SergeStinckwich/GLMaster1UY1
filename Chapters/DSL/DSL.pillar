!! Concevoir un DSL embarqué avec Pharo
@cha:dsl

Dans ce chapitre, nous allons déveloper un langage métier (Domain-Specific Language or DSL) simple pour lancer des dés.
Des joueurs de jeu de rôles comme Dungeons \& Dragons sont familier de cette forme de DSL.
Un exemple d'utilisation de ce DSL est l'expression suivante: ==2 D20 + 1 D6== ce qui signifie que nous lancons deux dés de 20 faces et un dé de 6 faces.
C'est appellé un DSL embarqué car il utilise la syntaxe du langage qui l'implémente. Ici nous utilisons la syntaxe de Pharo afin d'implémenter ce langage de lancer de dés.

Ce petit exercice va vous montrer comment (1) réutiliser simplement un opérateur que le ==\+==, (2) développer un langage spécifique embarqué et (3) utiliser des extensions de classes (le fait de pouvor définir une méthode dans un autre package que celui de la classe de la méthode).

!!! Pour commencer

En utilisant le navigateur de classe, définir un package nommé ==Dice== ou tout autre nom que vous aimez lui donner.

!!!! Créer un test
Il est toujours mieux de vérifier que le code que nous écrivons fonctionne toujours comme nous le souhaitons. Pour cela, nous allons créer un test unitaire. Les tests unitaires ont été créer par Kent Beck en Smalltalk, l'ancêtre de Pharo. C'est une pratique répandue dans de nombreux langages de programmation.

Définir la classe ==DieTest== comme une sous-classe de ==TestCase== comme suit: 

[[[
TestCase subclass: #DieTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Dice'
]]]

Ce que nous pouvons tester est que le nombre de faces d'un dé par défaut est 6.

[[[
DieTest >> testInitializeIsOk
    self assert: Die new faces equals: 6
]]]

Si vous exécutez ce test, le système va vous demander de créer un classe ==Die==. Faîtes le.

!!!! Définir la classe Die

La classe ==Die== hérite de la classe ==Object== et possède une seule variable d'instances ==faces== qui représente le nombre de faces que possède un dé. La figure *@figOneClassDiceDesign* donne la liste des messages à laquelle cette classe peut répondre.

+Classe Die avec ses messages. Notez que la méthode ==withFaces:== est une méthode de classe.>file://figures/OneClassDiceDesign.pdf|width=25|label=figOneClassDiceDesign+

[[[
Object subclass:
	... Your solution ...
]]]

Dans le protocole ==initialization==, définir la méthode ==initialize== qui fixe simplement le nombre par défaut de faces d'un dé à 6.

[[[
Die >> initialize
	... Your solution ...
]]]

N'hésitez à ajouter un commentaire de classe.

Now define a method to return the number of faces an instance of ==Die== has.

[[[
Die >> faces
	^ faces
]]]

Maintenant tous vos tests doivent passer (et devenir verts).

!!! Lancer un dé
Afin de lancer un dé, nous devons utiliser la méthode ==atRandom== sur Number qui va tirer aléatoirement un nombre entre un et le receveur. Par exemple ==10 atRandom== tire un nombre entre 1 et 10.
Nous définissons donc la méthode ==roll==:

[[[
Die >> roll
	... Your solution ...
]]]

Maintenant nous pouvons créer un intance de dé avec ==Die new== et lui envoyer un message ==roll== et obtenir un résultat en retour.
Faire ==Die new inspect== afin d'obtenir un inspecteur et ensuite dans le panneau du bas ==self roll==.
Vous devriez obtenir un inspecteur comme celui de la figure *@figDiceNoDetail*.
A l'aide de cet inspecteur, vous pouvez intéragir avec un dé en écrivant une expression dans le panneau du bas.

+Inspecting and interacting with a die.>file://figures/DiceNoDetail.png|width=60|label=figDiceNoDetail+

!!! Créer un nouveau test
Essayons maintenant un nouveau test afin de vérifier qui vérifie que lancer un nouveau dé va retourner une valeur entre 1 et 6.
C'est ce que la méthode de test suivante spécifie.
 
[[[
DieTest >> testRolling
	| d |
	d := Die new.
	10 timesRepeat: [ self assert: (d roll between: 1 and: 6) ]
]]]

""Important"" Il est souvent bien mieux de définir un test avant le code qu'il teste. Pourquoi ? Parce que vous pouvez réfléchir sur l'API de votre objet et au scénario qui va illustrer son fonctionnement correct. Cela aide à programmer la solution de manière correcte.

!!! Interface de création d'instance
Nous voulons créer simplement des instances de ==Die==.
Par exemple, créer un dé à 20 faces comme suit: ==Die withFaces: 20== plutôt que d'envoyer le message new à la classe de la façon suivante: ==Die new faces:20==.
Les deux expressions créent le même dé mais la première est plus courte à écrire.

Dans l'expression ==Die withFaces:==, le message ==withFaces:== est envoyé à la classe ==Die==.
Il y a rien de nouveau dans cette façon de faire, nous envoyons constamment le message ==new== à ==Die== afin de créer des instances.

Commençons par écrire un test: 

[[[
DieTest >> testCreationIsOk
	self assert: (Die withFaces: 20) faces equals: 20
]]]

Le test montre bien que nous envoyons un message à la classe ==Die== directement.

!!!! Définir une méthode de classe

Définir la méthode de ''classe'' ==withFaces:== comme suit:
- Cliquer sur le button ''class'' dans le navigateur de classes afin d'assurer que nous éditons bien une méthode de classe.
- Définir la méthode comme suit:

[[[
Die class >> withFaces: aNumber
	"Create and initialize a new die with aNumber faces."
	| instance |
	instance := self new.
	instance faces: aNumber.
	^ instance
]]]

Expliquons ce que nous faisons
- la méthode ==withFaces:== crée un instance en utilisant le message ==new==. ==self== représente le receveur du message et le receveur est la classe ==Die== elle même.
- puis ensuite la méthode envoie le message ==faces:== à l'instance crée et
- finalement on retourne l'instance créée.

La méthode de classe aurait pu être nommé différent comme ==faces:== ou tout autre nom. Cela n'est pas important. Mais quelque soit le nom donné, le message est exécuté sur un receveur (self) qui est une classe (==Die==).

Si vous tentez d'exécuter ce code, cela ne va pas fonctionner, car nous n'avons pas encore créer la méthode ==faces:==.
Il est temps de le faire maintenant.
Faites attention que la méthode ==faces:== est envoyé à une instance de la class ==Die== et pas à la classe elle-même.
C'est une méthode d'instance, donc assurer d'avoir désectionner le bouton class avant de l'éditer.

[[[
Die >> faces: aNumber
	faces := aNumber
]]]

Maintenant votre test devrait passer au vert.
On pourrait ajouter plus de comportement à la classe ==Die== mais intéressons nous maintenant à la possibilité d'implémenter une jet de plusieurs dés.

""Important""
Une méthode de class est une méthode qui s'exécutent en réaction à des messages envoyé à la classe.
Elle est définit dans la partie classe d'une classe.
Dans ==Die withFaces: 20==, le message ==withFaces:== est envoyé à la classe ==Die==.
Dans ==Die new faces: 20==, le message ==new== est envoyé à la classe ==Die== et le message ==faces:== est envoyé à l'instance retourné par ==Die new==.

!!!! [Optionel] Définition alternative pour la création d'instance
In a first reading you can skip this section. The ''class'' method definition ==withFaces:== above is strictly equivalent to the one below.

[[[
Die class >> withFaces: aNumber
	^ self new faces: aNumber; yourself
]]]

Let us explain it a bit. ==self== represents the class ==Die== itself. Sending it the message ==new==, we create an instance and send it the ==faces:== message. And we return the expression. So why do we need the message ==yourself==. The message ==yourself== is needed to make sure that whatever value the instance message ==faces:== returns, the instance creation method we are defining returns the new created instance. You can try to redefine the instance method ==faces:== as follows:

[[[
Die >> faces: aNumber 
	faces := aNumber. 
	^ 33
]]]
Without the use of ==yourself==, ==Die withFaces: 20== will return 33. With ==yourself== it will return the instance.

The trick is that ==yourself== is a simple method defined on ==Object== class: The message ==yourself== returns the receiver of a message.
The use of ==;== sends the message to the receiver of the previous message (here ==faces:==).  The message ==yourself== is then sent to the object resulting from the execution of the expression ==self new== (which returns a new instance of the class ==Die==), as a consequence it returns the new instance. 

!!! Première spécification d'un jet de plusieurs dés
Définisson maintenant une nouvelle classe ==DieHandle== qui représente un jet de plusieurs dés.
Voici l'API que nous voulons créer dans un premier temps (comme indiqué dans la figure *@fig:DiceDesign*).
Nous créeons un nouveau jet de dé et nous lui ajoutons plusieurs dés.

+Un jet de dés est composés de dés.>file://figures/DiceDesign.pdf|width=60|label=fig:DiceDesign+

[[[
DieHandle new 
	addDie: (Die withFaces: 6);
	addDie: (Die withFaces: 10);
	yourself
]]]

Bien sur, nous allons commencer par écrire des tests pour cette nouvelle classe.
Nous définissons la classe ==DieHandleTest==.

[[[
TestCase subclass: #DieHandleTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Dice'
]]]

!!!! Tester un jet de plusieurs dés

Nous définissons une nouvelle méthode de test comme suit.
Nous créeons un nouveau jet de dés auquel nous ajoutons un dé à 6 faces et une autre dé à 10 faces.
Nous vérifions que le jet de dés se compose de deux dés.

[[[
DieHandleTest >> testCreationAdding
	| handle |
	handle := DieHandle new 
			addDie: (Die withFaces: 6);
			addDie: (Die withFaces: 10);
			yourself.
	self assert: handle diceNumber = 2.
]]]

Nous pouvons faire mieux.
Ajoutons encore un nouveau test qui vérifie que nous pouvons additionner deux dés ayant le même nombre de faces.

[[[
DieHandleTest >> testAddingTwiceTheSameDice
	| handle |
	handle := DieHandle new. 
	handle addDie: (Die withFaces: 6).
	self assert: handle diceNumber = 1.
	handle addDie: (Die withFaces: 6).
	self assert: handle diceNumber = 2.
]]]

Maintenant que nous avons spécifié ce que nous voulons, il nous reste à implémenter la classe correspondante et les messages.
Vous voyez que c'est facile.

!!! Définir la classe DieHandle

La classe ==DieHandle== hérite de ==Object== et définit une seule variable d'instance qui contient les dés.

[[[
Object subclass: ...
	... Your solution ...
]]]

Nous initialisons simplement la variable d'instance ==dice== avec une instance de la classe ==OrderedCollection==.

[[[
DieHandle >> initialize
	... Your solution ...
]]]

Puis nous définissons une méthode ==addDie:== afin d'ajouter un nouveau dé à la liste des dés du jet de dés.
Vous pouvez utiliser le message ==add:== pour l'ajouter à la collection.

[[[
DieHandle >> addDie: aDie 
	... Your solution ...
]]]

Nous pouvons exécuter le code qui suit et inspecter le résultat.
Vous devriez obtenir un inspecteur comme celui de la figure *@DieHandleNoDetail* .

[[[
DieHandle new 
	addDie: (Die withFaces: 6);
	addDie: (Die withFaces: 10);
	yourself
]]]

+Inspecter un jet de dés (DieHandle).>file://figures/DiceHandleNoDetail.png|width=60|label=DieHandleNoDetail+

Finalement nous pouvons ajouter la méthode ==diceNumber== à la classe ==DieHandle== afin d'obtenir le nombre de dés contenu dans un jet de dés. Nous retournons tout simplement le nombre d'élément de la collection contenant les dés.

[[[
DieHandle >> diceNumber  
	^ dice size
]]]

Votre test devrait être maintenant vert.

!!! Améliorer la vie du programmeur

Now when you open an inspector you cannot see well the dice that compose the die handle. Click on the ==dice== instance variable and you will only get a list of ==a Dice== without further information. What we would like to get is something like ==a Die (6)== or ==a Die (10)== so that in a glance we know the faces a die has. 

[[[
DieHandle new 
	addDie: (Die withFaces: 6);
	addDie: (Die withFaces: 10);
	yourself
]]]

This is the  message ==printOn:== that is responsible to provide a textual representation of the message receiver. By default, it just prints the name of the class prefixed with =='a'== or =='an'==. So we will enhance the ==printOn:== method of the ==Die== class to provide more information. Here we simply add the number of faces surrounded by parenthesis. The ==printOn:== message is sent with a stream as argument. It is in this stream that we should add information. We use the message ==nextPutAll:== to add a number of characters to the stream. We concatenate the characters to compose ==()== using the message ==,== comma defined on collections (and that concatenate collections and strings).

[[[
Die >> printOn: aStream

	super printOn: aStream.
	aStream nextPutAll: ' (', faces printString, ')'
]]]

Now in your inspector you can see effectively the number of faces a die handle has as shown by Figure *@diceDetail* and it is now easier to check the dice contained inside a handle (See Figure *@DieHandleDetail*). 

+Die details.>file://figures/DiceDetail.png|width=70|label=diceDetail+ 

+A die handle with more information.>file://figures/DiceHandleDetail.png|width=90|label=DieHandleDetail+ 

!!!! Optimization Remark. 
Note that this implementation of ==printOn:== is suboptimal since it is creating a separate stream (during the invocation of ==faces printString==) instead of reusing the stream passed as argument. A better solution is to rewrite ==printOn:== as follows: 

[[[
Die >> printOn: aStream

	super printOn: aStream.
	aStream nextPutAll: ' ('.
	aStream print: faces.
	aStream nextPutAll: ')'
]]]

As an exercise we let you browse the methods ==printString== on class ==Object== and ==print:== on class ==Stream==.

!!! Lancer un jet de dés

Maintenant nous pouvons définir le lancer d'un jet de dés en simplement additionnant les faces des chacun des dés lancés.
Implémenter la méthode ==roll== sur la classe ==DieHandle==.
Cette méthode doit collecter les résultats de chacun des lancers des dés et les ajouter.

Vous pouvez jeter un coup d'oeil à la méthode ==sum== de la classe ==Collection== pour vous inspirer pour faire l'itération.

[[[
DieHandle >> roll
	... Your solution ...
]]]

Maintenant, nous pouvons envoyer le message ==rool== à un jet de dés.

[[[
handle := DieHandle new 
		addDie: (Die withFaces: 6);
		addDie: (Die withFaces: 10);
		yourself.
handle roll
]]]

Définir un test afin de spécifier un tel comportement.
Lancer un jet de n dés doit retourner un nombre entre n et la somme des faces de chacun des dés.

[[[
DieHandleTest >> testRoll
	... Your solution ...
]]]

!!! A propos de l'API de Die et DieHandle

Nous allons passons un peu de temps à regarder la relation entre ==DieHandle== et ==Die==.
Un jet de dés est composé de plusieurs dés.
Une décision de conception que nous avons pris est que nous pouvons envoyer la même méthode ==roll== à un dé ou à un jet de dés.
C'est une décision importante.

Pourquoi ? Parce que cela signifie que du point de vue du client (c'est-à-dire celui qui utilise ces objets), on n'a pas besoin de considérer le type du receveur. Un client envoie juste un message ==roll== à un objet et obtient un nombre en retour (comme on le voir dans la figure *@figDieHandleComposition*.
Le client n'a pas à s'occuper du fait que le receveur du message est un simple dé ou une composition de plusieurs dés.
Une telle décision de conception suit le principe ''Don't ask, tell''.

+Une API polymorphique respectant le principe ''Don't ask, tell''.>file://figures/DiceHandleComposition.pdf|width=60|label=figDieHandleComposition+

""Important"" Offrir une API polymorphique est un des fondements d'une bonne conception orientée objet.
Elle permet de faire respecter le principe ''Don't ask, tell''.
Les clients n'ont pas besoin de se préoccuper du type des objets avec lequels ils interagissent.

Par exemple, nous pouvons écrire l'expression suivante pour ajouter un dé et un jet de dé à une collection puis collecter les différentes valeurs des dés (nous convertissons le résultat en tableau pour pouvoir l'afficher dans ce livre).

[[[testcase=true
| col |
col := OrderedCollection new. 
col add: (Die withFaces: 20).
col add: (DieHandle new addDie: (Die withFaces: 4); yourself).
(col collect: [:each | each roll]) asArray
>>> #(17 3) 
]]]

!!!! A propos de la composition

Les objets composites comme les objets représentant un document (un livre est composé de chapitres, un chapitre est composé de sectrions, une section est composée de paragraphes). ont une relation de composition plus complexe que la composition entre un dé et un jet de dés. Souvent la composition est récursive dans sens où un élément peut être un tout aussi: par exemple, un diagramme peut être composé de lignes, cercles ou d'autres diagrammes.

%We will see an example of such composition in the Expression Chapter *@cha:expressions*.

!!! Syntaxe jeu de rôle

Nous sommes prêt à définir une syntaxe suivant les pratiques d'un jeu de rôle, i.e en utilisant ==2 D20== pour créer un jet de dés de deux dés à 20 faces chacun. Afin de pouvoir faire, cela, nous allons définir des extensions de classes: nous allons définir des méthodes supplémentaires dans la class ==Integer== mais ces méthodes ne seront disponibles que lorsque le package Dice sera chargé.

Commençons par spécifier ce que nous voulons obtenir en écrivant un nouveau test dans la classe ==DieHandleTest==.
Il est toujours bien de sauté sur l'occasion d'écrire de nouveaux tests. Lorsque nous exécutons ==2 D20== nous devrions obtenir un nouveau jet dées composé de deux dés. C'est ce que fait la méthode ==testSimpleHandler== :

[[[
DieHandleTest >> testSimpleHandle
	self assert: 2 D20 diceNumber = 2.
]]]

Commencer par vérifier que le test ne fonctionne pas !
C'est encore plus satisfaisant de faire passer un test alors qu'il ne fonctionnait pas auparavant.
Définissons la méthode ==D20== avec le protocole ==\*NameOfYourPackage== (=='\*Dice'== si vous avez intitulé votre package =='Dice'==).
L'étoile ==\*== préfixant le nom du protocole indique que le protocole et la méthode appartiennent à un autre pacjage que le package de la classe. Ici nous voulons dire que même si la méthode ==D20== est définie dans la classe ==Integer==, elle doit être sauvegarder dans le package ==Dice==.

La méthode ==D20== crée simple un nouveau jeu de dés, ajoute le nombre correct de ce jet de dés et le retourne comme résultat.

[[[
Integer >> D20
	... Your solution ...
]]]

!!!! A propos des extensions de classes

Nous avons demandé de placer la méthode ==D20== dans le protocole démarrant par une étoile en utilisant le nom du package 
(=='*Dice'==) parce que nous voulons que cette méthode soit packager (et sauvegarder) ensemble avec le code des classes
que nous avond déjà créé (==Die==, ==DieHandle==,...).
Il est possible en Pharo de définir des méthodes à l'extérieur d'un package.
On appelle cette possibilité, extension de classes: elle consiste à ajouter des méthodes à des classes que nous n'avons pas définies.
Par exemple ==D20== est défini dans la classe ==Integer==. De telles méthodes n'ont de sense que lorsque le package ==Dice== est chargé. C'est pourquoi nous voulons sauvegarder et charger le code de telles méthodes avec le package qui les créent.
Voilà pouquoi nous l'indiquons par le protocole particulier  =='*Dice'==.
Il s'agit d'une notation qui permet au système de savoir que cette méthode fait parti d'un autre package et pas du package de la classe ==Integer==.

Maintenant vos tests devraient passer.

Vous pouvez faire la même chose pour des dés de différentes faces: 4, 6, 10, 20.
Afin d'éviter de répéter plusieurs la même logique, nous allons introduire une méthode ==D:== et définir les autres à partir de cette là.

Assurez vous que toutes les méthodes ont été placées dans le protocole =='*Dice'==.

[[[
Integer >> D: anInteger
	... Your solution ...
]]]

[[[
Integer >> D4
	^ self D: 4
]]]

[[[
Integer >> D6
	^ self D: 6
]]]

[[[
Integer >> D10
	^ self D: 10
]]]

[[[
Integer >> D20
	^ self D: 20
]]]

Nous avons une forme plus compacte pour créer des dés et nous allons passer à la dernière partie de ce chapitre: l'addition de jets de dés.

!!! Gérer l'addition
Ce qui manque maintenant c'est la possibilité d'additionner plusiers jets de dés comme suit: ==2 D20 + 3 D10==. 
Bien sur, comme d'habitude commençons par écrire un test en premier afin de bien comprendre ce que bous voulons faire.

[[[
DieHandleTest >> testSumming
	| handle |
	handle := 2 D20 + 3 D10.
	self assert: handle diceNumber = 5.
]]]

Nous allons définir la méthode ==\+== sur la classe ==DieHandle==.
Dans de nombreux langages de programmation, il n'est pas possible cela n'est pas possible ou alors il passer par la surcharge d'opérateurs (comme en C++).
En Pharo ==\+== est juste un message comme un autre, que nous pouvons définir sur les classes si nous le souhaitons.

Nous devons maintenant nous demander quelle est le sens de l'addition de deux jets de dés.
Faut-il modifier le receveur de l'expression ou bien créer un nouvel objet. Nous avons choisi une style plutôt fonctionel et décider de créer un nouvel objet.

La méthode ==\+== crée donc un nouveau jet dé ajouter les dés du receveur à ce jet et ensuite les dés du jet de dés passé en paramètre. Finalement nous retournons le nouvel jet de dés.

[[[
DieHandle >> + aDieHandle
	... Your solution ... 
]]]

Maintenant nous pouvons exécuter la méthode ==(2 D20 + 1 D6) roll== et pouvons commencer à jouer à un jeu de rôle si nous le souhaitons.

!!! Conclusion

Ce chapitre illustre comment un créer un petit langage métier basé sur la définition de classe d'un domaine (ici ==Die== and ==DieHandle==) et ajoiter des extensions à ces classes de base dans ==Integer== par exemple.
Nous avons également montrer que nous pouvons créer toutes les méthodes qui sont nécessaires même si certaines de ces méthodes sur des classes externes (ici ==Integer==) au package.
Il est naturel dans un langage de programmation comme Phato d'utiliser et de définier des opérateurs comme ==+==.
